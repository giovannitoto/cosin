// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// Rcpp_cosin
Rcpp::List Rcpp_cosin(double alpha, double a_sigma, arma::mat a_y, arma::mat a_yp1, double a_theta, arma::mat GammaB, double b_sigma, double b0, double b1, int burn, arma::mat GammaT, double b_theta, arma::vec d, arma::mat eta, int kmax, int kstar, arma::mat Lambda, arma::mat Lambda_star, arma::mat logit, arma::mat Beta, int nrun, Rcpp::List out, arma::mat Phi, arma::mat Plam, double prec_gammaT, double prec_beta, arma::mat pred, arma::vec prob, arma::vec ps, double p_constant, arma::vec rho, double sd_gammaB, int sp, int start_adapt, int thin, arma::vec uu, arma::vec v, bool verbose, arma::vec w, arma::mat x, bool xnull, arma::mat wT, arma::mat wB);
RcppExport SEXP _cosin_Rcpp_cosin(SEXP alphaSEXP, SEXP a_sigmaSEXP, SEXP a_ySEXP, SEXP a_yp1SEXP, SEXP a_thetaSEXP, SEXP GammaBSEXP, SEXP b_sigmaSEXP, SEXP b0SEXP, SEXP b1SEXP, SEXP burnSEXP, SEXP GammaTSEXP, SEXP b_thetaSEXP, SEXP dSEXP, SEXP etaSEXP, SEXP kmaxSEXP, SEXP kstarSEXP, SEXP LambdaSEXP, SEXP Lambda_starSEXP, SEXP logitSEXP, SEXP BetaSEXP, SEXP nrunSEXP, SEXP outSEXP, SEXP PhiSEXP, SEXP PlamSEXP, SEXP prec_gammaTSEXP, SEXP prec_betaSEXP, SEXP predSEXP, SEXP probSEXP, SEXP psSEXP, SEXP p_constantSEXP, SEXP rhoSEXP, SEXP sd_gammaBSEXP, SEXP spSEXP, SEXP start_adaptSEXP, SEXP thinSEXP, SEXP uuSEXP, SEXP vSEXP, SEXP verboseSEXP, SEXP wSEXP, SEXP xSEXP, SEXP xnullSEXP, SEXP wTSEXP, SEXP wBSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type a_sigma(a_sigmaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type a_y(a_ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type a_yp1(a_yp1SEXP);
    Rcpp::traits::input_parameter< double >::type a_theta(a_thetaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type GammaB(GammaBSEXP);
    Rcpp::traits::input_parameter< double >::type b_sigma(b_sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type b0(b0SEXP);
    Rcpp::traits::input_parameter< double >::type b1(b1SEXP);
    Rcpp::traits::input_parameter< int >::type burn(burnSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type GammaT(GammaTSEXP);
    Rcpp::traits::input_parameter< double >::type b_theta(b_thetaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type d(dSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< int >::type kmax(kmaxSEXP);
    Rcpp::traits::input_parameter< int >::type kstar(kstarSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Lambda(LambdaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Lambda_star(Lambda_starSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type logit(logitSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Beta(BetaSEXP);
    Rcpp::traits::input_parameter< int >::type nrun(nrunSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type out(outSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Phi(PhiSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Plam(PlamSEXP);
    Rcpp::traits::input_parameter< double >::type prec_gammaT(prec_gammaTSEXP);
    Rcpp::traits::input_parameter< double >::type prec_beta(prec_betaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type pred(predSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type prob(probSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ps(psSEXP);
    Rcpp::traits::input_parameter< double >::type p_constant(p_constantSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< double >::type sd_gammaB(sd_gammaBSEXP);
    Rcpp::traits::input_parameter< int >::type sp(spSEXP);
    Rcpp::traits::input_parameter< int >::type start_adapt(start_adaptSEXP);
    Rcpp::traits::input_parameter< int >::type thin(thinSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type uu(uuSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type v(vSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type w(wSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type xnull(xnullSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type wT(wTSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type wB(wBSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_cosin(alpha, a_sigma, a_y, a_yp1, a_theta, GammaB, b_sigma, b0, b1, burn, GammaT, b_theta, d, eta, kmax, kstar, Lambda, Lambda_star, logit, Beta, nrun, out, Phi, Plam, prec_gammaT, prec_beta, pred, prob, ps, p_constant, rho, sd_gammaB, sp, start_adapt, thin, uu, v, verbose, w, x, xnull, wT, wB));
    return rcpp_result_gen;
END_RCPP
}
// truncnorm_lg
arma::mat truncnorm_lg(const arma::mat& y_lower, const arma::mat& y_upper, const arma::mat& mu, const arma::vec& sigma, const arma::mat& u_rand);
RcppExport SEXP _cosin_truncnorm_lg(SEXP y_lowerSEXP, SEXP y_upperSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP u_randSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type y_lower(y_lowerSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type y_upper(y_upperSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type u_rand(u_randSEXP);
    rcpp_result_gen = Rcpp::wrap(truncnorm_lg(y_lower, y_upper, mu, sigma, u_rand));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_pgdraw
NumericVector rcpp_pgdraw(NumericVector b, NumericVector c);
RcppExport SEXP _cosin_rcpp_pgdraw(SEXP bSEXP, SEXP cSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type b(bSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type c(cSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_pgdraw(b, c));
    return rcpp_result_gen;
END_RCPP
}
// samplepg
double samplepg(double z);
RcppExport SEXP _cosin_samplepg(SEXP zSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type z(zSEXP);
    rcpp_result_gen = Rcpp::wrap(samplepg(z));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_cosin_Rcpp_cosin", (DL_FUNC) &_cosin_Rcpp_cosin, 43},
    {"_cosin_truncnorm_lg", (DL_FUNC) &_cosin_truncnorm_lg, 5},
    {"_cosin_rcpp_pgdraw", (DL_FUNC) &_cosin_rcpp_pgdraw, 2},
    {"_cosin_samplepg", (DL_FUNC) &_cosin_samplepg, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_cosin(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
